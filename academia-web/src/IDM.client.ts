// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "IDM.proto" (package "IDM", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { IDM } from "./IDM";
import type { register } from "./IDM";
import type { Empty } from "./google/protobuf/empty";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { token } from "./IDM";
import type { login } from "./IDM";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service IDM.IDM
 */
export interface IIDMClient {
    /**
     * @generated from protobuf rpc: Authenticate(IDM.login) returns (IDM.token);
     */
    authenticate(input: login, options?: RpcOptions): UnaryCall<login, token>;
    /**
     * @generated from protobuf rpc: Deauthenticate(google.protobuf.Empty) returns (google.protobuf.Empty);
     */
    deauthenticate(input: Empty, options?: RpcOptions): UnaryCall<Empty, Empty>;
    /**
     * @generated from protobuf rpc: Register(IDM.register) returns (google.protobuf.Empty);
     */
    register(input: register, options?: RpcOptions): UnaryCall<register, Empty>;
    /**
     * @generated from protobuf rpc: Validate(google.protobuf.Empty) returns (google.protobuf.Empty);
     */
    validate(input: Empty, options?: RpcOptions): UnaryCall<Empty, Empty>;
}
/**
 * @generated from protobuf service IDM.IDM
 */
export class IDMClient implements IIDMClient, ServiceInfo {
    typeName = IDM.typeName;
    methods = IDM.methods;
    options = IDM.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: Authenticate(IDM.login) returns (IDM.token);
     */
    authenticate(input: login, options?: RpcOptions): UnaryCall<login, token> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<login, token>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Deauthenticate(google.protobuf.Empty) returns (google.protobuf.Empty);
     */
    deauthenticate(input: Empty, options?: RpcOptions): UnaryCall<Empty, Empty> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<Empty, Empty>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Register(IDM.register) returns (google.protobuf.Empty);
     */
    register(input: register, options?: RpcOptions): UnaryCall<register, Empty> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<register, Empty>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Validate(google.protobuf.Empty) returns (google.protobuf.Empty);
     */
    validate(input: Empty, options?: RpcOptions): UnaryCall<Empty, Empty> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<Empty, Empty>("unary", this._transport, method, opt, input);
    }
}
